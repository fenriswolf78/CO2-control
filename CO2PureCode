/*
Code for:
<<=========================>>
2x Standard photocell
used PIN 7, PIN 8
PIN 1  connect to VCC 5V
PIN 2 connect to DATA Port + 10kOhm resistor to GND port
<<=========================>>
measurement for DHT22 Sensor
used PIN A0, GND, VCC 5V
Output signal:    single bus
measuring range:  humidity 0-100% (+-2%)
                  temperature -40°C - 80°C (-+0.2°C)
sensing period:   ~ 2 seconds
Pins on module from left 
PIN 1   connect to VCC port from 3.3-6.0VDC
PIN 2   connect to DATA port + 1kOhm resistor to VCC port
PIN 3   NULL
PIN 4   connect to GND port
<<=========================>>
the 4 lines 20 cols LCD Display from Sunfounder.com
used PIN A4(SDA), PIN A5(SDC), GND, VCC 5V
Pins on module from upon
PIN 1   GND
PIN 2   VCC 5.0 VDC (-+0.1)
PIN 3   SDA (data line)
PIN 4   SDC (clock line)
<<=========================>>
messurement for 2 x MQ135 Sensor with backup fuction
used PIN A1, PIN A2, GND, VCC 5V
Output signal:    analog or digital bus
measuring range:  10 - 2000ppm
!!IMPORTANT 24 hours preheat time
sensing period:   ~ 2 seconds
Pins on module from left 
PIN 1   VCC 5.0 VDC (-+0.1)
PIN 2   GND
PIN 3   Digital DATA
PIN 4   Analog DATA (we use that)
<<=========================>>
2x 5 V DC to 230V AC relais
!!IMPORTANT Only low ampere on 230V side allowed
<<=========================>>
Author:   Fenriswolf
Version:  V0.8 2017.05.25 18:56
<<=========================>>
*/

// <<===== initalize library =====>>
#include <Adafruit_Sensor.h> //Adafruit_Sensor-master.zip
#include <DHT.h> //DHT22-04.zip
#include <Wire.h> //I2C library
#include <LiquidCrystal_I2C.h> //LCD library
#include <MQ135.h> //gas sensor library

// <<===== define readpin and module =====>>
#define DHTPIN A0 //set analog pin 0 to read data
#define DHTTYPE DHT22 //we use a HDT22 wodule without board
#define MQ135_1PIN A1 //set analog pin 1 to read data
#define MQ135_2PIN A2 //set analog pin 2 to read data
int k1 = 7; //relais1 magnetic valve
int k2 = 8; //relais2 ventilation

// <<===== rename module to =====>>
DHT dht(DHTPIN, DHTTYPE);
MQ135 co2_1 = MQ135 (MQ135_1PIN); //set name for first co2 module to co2_1
MQ135 co2_2 = MQ135 (MQ135_2PIN); //set name for second co2 module to co2_2

// <<===== variables =====>>
int photocell_1 = 7; //rename digital pin 7 to photocell_1
int photocell_2 = 8; //rename digital pin 8 to photocell_2
int phcValue_1 = 0; //define photocell_1 value
int phcValue_2 = 0; //define photocell_2 value
int phcValue = 0; //define photocell value
boolean light = false; //define first value for light on or off
float humid1 = 0; //initalize first humidity measurement
float humid2 = 0; //initalize second humidity measurement
float humid = 0; //initalize compared humidity measurement
float temp1 = 0; //initalize first temperature measurement
float temp2 = 0; //initalize second temperature measurement
float temp = 0; //initalize compared temperature measurement
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 20 chars and 4 line display
float airthreshold[3] = {400, 400, 800};
float ppmValue1 = 0; //initalize first humidity measurement
float ppmValue2 = 0; //initalize second humidity measurement
float ppmValue = 0; //initalize compared humidity measurement
boolean relayK1 = false; //relay1 magnetic valve
boolean relayK2 = false; //relay2 ventilation

//<<=========================>>
void setup()
{
  Serial.begin(9600);
  lcd.init(); //initialize the lcd
  lcd.backlight(); //open the backlight
  pinMode(photocell_1 , INPUT); //define photocell_1 PIN as input
  pinMode(photocell_2 , INPUT); //define photocell_2 PIN as input
  pinMode(k1, OUTPUT);
  pinMode(k2, OUTPUT);
}

void lightState()
{
  phcValue_1 = digitalRead(photocell_1);
  delay (500);
  phcValue_2 = digitalRead(photocell_2);
  phcValue = (phcValue_1+phcValue_2)/2;
  if (!isnan(phcValue_1) || !isnan(phcValue_2))
  {
    if(phcValue >= 500)
    {
      light = true;
    }
    else
    {
      light = false;
    }
  }
  else if(phcValue < 500)
  {
    light = true;
  }
  else
  {
    light = false;
  }
}

void compareTempHumid()
{
  humid1 = dht.readHumidity();//set value for humidity on humid1
  temp1 = dht.readTemperature();//set value for temperature on temp1
  delay(5000);//wait 5 seconds to second measurement
  humid2 = dht.readHumidity();//set value for humidity on humid2
  temp2 = dht.readTemperature();//set value for temperature on temp2
  humid = (humid1+humid2)/2;
  temp = (temp1+temp2)/2;
  if (!isnan(temp1) || !isnan(humid1) || !isnan(temp2) || !isnan(humid2))
  {
    if(humid1 >= humid2/100*95 || humid1 <= humid2/100*105)
    {
      line0(); //code for display line 1 temperatur line 2 humidity
      line1();
    }
    else
    {
      lcd.setCursor(0,0); //code for display line 1 temperatur line 2 humidity
      lcd.print("DEVIATION > 5%!!!");
      line0();
      line1();
    }
  }
  else
  {
    lcd.clear(); //code for display sensorerror
    lcd.setCursor(0,0);
    lcd.print("Sensorerror => DHT22");
    lcd.setCursor(0,1);
    lcd.print(" no data avaliable  ");
  }
}

void line0() //code for display line 1 temperatur
{
  
  lcd.setCursor(0,0);
  lcd.print("                    "); //clear line1
  lcd.setCursor(0,0); 
  lcd.print("Temperature");
  lcd.setCursor(14,0);
  lcd.print(temp);
  lcd.setCursor(18,0);
  lcd.print(" C");
}

void line1() //code for display line 2 humidity
{
  lcd.setCursor(0,1);
  lcd.print("                    "); //clear line2
  lcd.setCursor(0,1);
  lcd.print("Humidity");
  lcd.setCursor(14,1);
  lcd.print(humid);
  lcd.setCursor(18,1);
  lcd.print(" %");
}

void line2()
{
  lcd.setCursor(0,2);
  lcd.print("                    "); //clear line3
  lcd.setCursor(0,2);
  lcd.print("CO2 Value:");
  lcd.setCursor(12,2);
  lcd.print(ppmValue);
  lcd.setCursor(17,2);
  lcd.print("ppm");
}

void line3()
{
  lcd.setCursor(0,3);
  lcd.print("                    "); //clear line4
  lcd.setCursor(0,3);
  lcd.print("CO2 GAS ");
  lcd.setCursor(8,3);
  if(relayK1 == false)
  {
    lcd.print("OFF");
  }
  else
  {
    lcd.print("ON");
  }
  lcd.setCursor(12,3);
  lcd.print("Vent");
  lcd.setCursor(17,3);
  if(relayK2 == false)
  {
    lcd.print("OFF");
  }
  else
  {
    lcd.print("OFF");
  }
}

void co2()
{
  ppmValue1 = co2_1.getPPM();
  ppmValue2 = co2_2.getPPM();
  ppmValue = (ppmValue1 + ppmValue2)/2;
  if(ppmValue1 >= ppmValue2*0.95 || ppmValue1 <= ppmValue2*1.05)
  {
    line2();
    line3();
  }
}

void relayK1Active()
{
  if(ppmValue >= 1950 || isnan(ppmValue)|| temp >= 60)
  {
    relayK1 = false;
    relayK2 = true;
  }
  else if(ppmValue <= 400 && temp <= 40)
  {
    relayK1 = true;
    relayK2 = false;
  }
  else if(ppmValue >= 900 && temp <= 40)
  {
    relayK1 = false;
    relayK2 = false;  
}

void relayK2Active()
{
  if(temp >= 50)
  {
    relayK2 = true;
    relayK1 = false;
  }
  else if(temp <= 25 || isnan(temp))
  {
    relayK2 = false;
  }
  else if(temp <= 40)
  {
    relayK2 = false;
  }
}

//<<=========================>>
void loop()
{
  lightState(); 
  if(light == true) //if light is on
  {
    lcd.backlight(); //activate backlite for LCD Display
    compareTempHumid();
    co2();
    relayK1Active();
    relayK2Active();
    delay(30000); //wait 5 minutes
  }
  else
  {
    lcd.noBacklight(); //deactivate backlite for LCD Display
    compareTempHumid();
    co2();
    relayK1 = false;
    relayK2Active();
    delay(30000); //wait 5 minutes
  }
}
