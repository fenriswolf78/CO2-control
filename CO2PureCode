/*
Code for:
<<=========================>>
2x Standard photocell
used PIN 6, PIN 7
PIN 1  connect to VCC 5V
PIN 2 connect to DATA Port + 10kOhm resistor to GND port
<<=========================>>
measurement for DHT22 Sensor
used PIN A0, GND, VCC 5V
Output signal:    single bus
measuring range:  humidity 0-100% (+-2%)
                  temperature -40°C - 80°C (-+0.2°C)
sensing period:   ~ 2 seconds
Pins on module from left 
PIN 1   connect to VCC port from 3.3-6.0VDC
PIN 2   connect to DATA port + 1kOhm resistor to VCC port
PIN 3   NULL
PIN 4   connect to GND port
<<=========================>>
the 4 lines 20 cols LCD Display from Sunfounder.com
used PIN A4(SDA), PIN A5(SDC), GND, VCC 5V
Pins on module from upon
PIN 1   GND
PIN 2   VCC 5.0 VDC (-+0.1)
PIN 3   SDA (data line)
PIN 4   SDC (clock line)
<<=========================>>
messurement for MQ135 Sensor with backup fuction
used PIN A1, GND, VCC 5V
Output signal:    analog or digital bus
measuring range:  10 - 2000ppm
!!IMPORTANT 24 hours preheat time
sensing period:   ~ 2 seconds
Pins on module from left 
PIN 1   VCC 5.0 VDC (-+0.1)
PIN 2   GND
PIN 3   Digital DATA
PIN 4   Analog DATA (we use that)
<<=========================>>
2x 5 V DC to 230V AC relais 
Neuftech 2-CH 5V !! IMPORTANT low input = high output and vice versa !!
used PIN 4, PIN 5, GND, VCC 5V 
input signal: digital
!! IMPORTANT MAX 10 AMPS on 230V side allowed !!
<<=========================>>
Author:   Fenriswolf
Version:  V0.9 2017.06.12 13:23 TESTVERSION
<<=========================>>
*/

// <<=== initalize library ===>>
#include <Adafruit_Sensor.h> //Adafruit_Sensor-master.zip
#include <DHT.h> //DHT22-04.zip
#include <Wire.h> //I2C library
#include <LiquidCrystal_I2C.h> //LCD library
#include <MQ135.h> //gas sensor library

// <<=== define readpin and module ===>>
#define DHTPIN A0 //set analog pin 0 to read data
#define DHTTYPE DHT22 //we use a HDT22 wodule without board
#define MQ135PIN A1 //set analog pin 1 to read data
#define photocell 7 //rename digital pin 7 to photocell_1
#define k1 4 //relais1 magnetic valve rename digital pin 6 to k1
#define k2 5 //relais2 ventilation rename digital pin 6 to k2

// <<=== rename module to ===>>
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 20 chars and 4 line display
DHT dht(DHTPIN, DHTTYPE); // set DHT22 name pin and type
MQ135 co2 = MQ135 (MQ135PIN); // set name for mq135-module to co2

// <<=== variables ===>>
float phcValue; //define photocell
boolean light; //define first value for light on or off
float humid; //initalize humidity measurement
float temp; //initalize temperature measurement
float rzeroMin; //initalize mq135 minimum
float rzeroMax; //initalize mq135 maximum
float ppmValue; //initalize ppm measurement
boolean relayK1; //relay1 magnetic valve
boolean relayK2; //relay2 ventilation


void setup()
{
  Serial.begin(9600); 
  lcd.init(); //initialize the lcd
  pinMode(photocell, INPUT); //define photocell PIN as input
  relayK1 = true; // set value k1 on true
  relayK2 = true; // set value k2 on true => 
  pinMode(k1, OUTPUT); //define relay 1 PIN as output
  pinMode(k2, OUTPUT); //define relay 1 PIN as output
}

void line0() // code for display line 1 temperatur
{
  lcd.setCursor(0,0);
  lcd.print("                    "); //clear line1
  lcd.setCursor(0,0); 
  lcd.print("Temperature");
  lcd.setCursor(14,0);
  lcd.print(temp);
  lcd.setCursor(18,0);
  lcd.print(" C");
}

void line1() // code for display line 2 humidity
{
  lcd.setCursor(0,1);
  lcd.print("                    "); //clear line2
  lcd.setCursor(0,1);
  lcd.print("Humidity");
  lcd.setCursor(14,1);
  lcd.print(humid);
  lcd.setCursor(18,1);
  lcd.print(" %");
}

void line2() // code for display line 3 co2 value in ppm
{
  lcd.setCursor(0,2);
  lcd.print("                    "); // clear line3
  lcd.setCursor(0,2);
  lcd.print("CO2 Value:");
  lcd.setCursor(12,2);
  lcd.print(ppmValue);
  lcd.setCursor(17,2);
  lcd.print("ppm");
}

void line3() // code for display line 3 relay status
{
  lcd.setCursor(0,3);
  lcd.print("                    "); // clear line4
  lcd.setCursor(0,3);
  lcd.print("CO2 GAS ");
  lcd.setCursor(8,3);
  if(relayK1 == false)
  {
    lcd.print("OFF");
  }
  else
  {
    lcd.print("ON");
  }
  lcd.setCursor(12,3);
  lcd.print("Vent");
  lcd.setCursor(17,3);
  if(relayK2 == false)
  {
    lcd.print("OFF");
  }
  else
  {
    lcd.print("OFF");
  }
}

void lightState() // // code for light yes or no
{
  phcValue = digitalRead(photocell);
  if (!isnan(phcValue))
  {
    if(phcValue >0)
    {
      light = true;
    }
    else
    {
      light = false;
    }
  }
  else
  {
    light = false;
  }
}

void lcdBacklight() // code for LCD Display backlight on or off
{
  if(light == true)
  {
    lcd.backlight();
  }
  else
  {
    lcd.noBacklight();
  }
}

void TempHumid() // code for DHT22 module to read temperature and humidity
{
  humid = dht.readHumidity();//set value for humidity on humid
  temp = dht.readTemperature();//set value for temperature on temp
  if (!isnan(temp) || !isnan(humid))
  {
    line0(); // goto code line0()
    line1(); // goto code line1()
  }
  else
  {
    lcd.clear(); // code for display sensorerror
    lcd.setCursor(0,0);
    lcd.print("Sensorerror => DHT22");
    lcd.setCursor(0,1);
    lcd.print(" no data avaliable  ");
  }
}

void co2Measurement() // code to set rzero and co2 value in ppm
{
  float rzero = co2.getRZero();
  if ( rzero > rzeroMax)
  {
    rzeroMax = rzero;
  }
  else if ( rzero < rzeroMin)
  {
    rzeroMin = rzero;
  }
  ppmValue = co2.getPPM();
  line2(); // goto code line2()
}

void relayK1Active() // code for relay k1 magentic valve settings and also partially relay k2 in some cases
{
  if(ppmValue >= 1950 || isnan(ppmValue)|| temp >= 60)
  {
    digitalWrite(k1, HIGH);
    relayK1 = false;
    digitalWrite(k2, LOW);
    relayK2 = true;
  }
  else if(ppmValue <= 500 && temp <= 40)
  {
    digitalWrite(k1, LOW);
    relayK1 = true;
    digitalWrite(k2, HIGH);
    relayK2 = false;
  }
  else if(ppmValue >= 900 && temp <= 40)
  {
    digitalWrite(k1, HIGH);
    relayK1 = false;
    digitalWrite(k2, HIGH);
    relayK2 = false;
  }
  line3(); // goto code line3()
}

void relayK2Active() // code for relay k2 ventilation settings
{
  if(temp >= 60)
  {
    digitalWrite(k1, HIGH);
    relayK1 = false;
    digitalWrite(k2, LOW);
    relayK2 = true;
  }
  else if(isnan(temp))
  {
    digitalWrite(k2, HIGH);
    relayK2 = false;
  }
  else if(temp <= 40)
  {
    digitalWrite(k2, HIGH);
    relayK2 = false;
  }
  line3(); // goto code line3()
}

void loop()
{
  lightState(); 
  lcdBacklight();
  TempHumid();
  co2Measurement();
  relayK1Active();
  relayK2Active();
  delay(30000); // delay 30 seconds 
}
